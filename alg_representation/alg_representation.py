from __future__ import absolute_import, division, print_function, unicode_literals

# TensorFlow and tf.keras
import tensorflow as tf
from tensorflow import keras

import numpy as np
import matplotlib.pyplot as plt

def preprocess_data(data):
    return data / 255.0  # range between 0 and 1 where 1 corresponds with 255 and 0 with 0

class TF_NN:
    def __init__(self, n, input_shape=(28, 28), activation='relu'):
        self.dataset = keras.datasets.mnist
        (self.train_images, self.train_labels), (self.validation_images, self.validation_labels) = self.dataset.load_data()
        print("amount of images: ", len(self.train_labels))
        self.train_images = preprocess_data(self.train_images)
        self.validation_images = preprocess_data(self.validation_images)

        # used the model from the tensorflow keras documentation
        self.model = keras.Sequential([
            keras.layers.Flatten(input_shape=input_shape),       # flat the input images (2d array) to a 1d array. This only restructures the data so it can be used in the next layer
            keras.layers.Dense(neurons, activation=activation),  # a fully connected layer using the n hidden neurons to be connected to the 28*28 neurons from the previous layer.
            keras.layers.Dense(10)                               # a fully connected network that contains the 10 possible output states.

        ])

    def compile_model(self):
        self.model.compile(optimizer='adam',
                           loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                           metrics=['accuracy'])

    def train_model(self, n=10):
        self.model.fit(self.train_images, self.train_labels, epochs=n)

    def evaluate_model(self):
        _, accuracy = self.model.evaluate(self.validation_images, self.validation_labels, verbose=2)
        return accuracy

def check_amount_hidden_neurons(start, end, step=1):
    plt.title("All accuracy results")
    plt.xlabel("hidden neurons")
    plt.ylabel("accuracy")
    y = []
    for i in range(start, end, step):
        tf_nn = TF_NN(i)
        tf_nn.compile_model()
        tf_nn.train_model(3)
        y.append(tf_nn.evaluate_model())
    plt.plot(range(start, end, step), y,)
    plt.show()

def main():

    #check_amount_hidden_neurons(1, 200, 10)

    tf_nn = TF_NN(80)  # we chose 80 out of the graph generated by the check_amount_hidden_neurons function. the network performs quite well under this number.
    tf_nn.compile_model()
    tf_nn.train_model()
    accuracy = tf_nn.evaluate_model()
    print("Accuracy of the model is: ", accuracy*100, "%")

if __name__ == '__main__':
    main()
